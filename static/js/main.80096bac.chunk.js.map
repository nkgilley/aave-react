{"version":3,"sources":["components/AddressForm.js","components/NetworkSelect.js","App.js","reportWebVitals.js","index.js"],"names":["AddressForm","props","state","value","address","stateChanger","handleChange","bind","handleSubmit","connectMetamask","event","this","setState","target","toLowerCase","Web3","utils","isAddress","alert","preventDefault","getAccount","a","web3","givenProvider","eth","requestAccounts","accounts","console","log","_account","onSubmit","type","onChange","className","onClick","Component","NetworkSelect","network","US_LOCALE","Intl","NumberFormat","style","currency","APIURLS","query","token_prices","get_token_price_in_usd","ticker","replace","fetch","then","response","json","catch","error","data","hasOwnProperty","parseFloat","price","get_token_price_in_eth","token_in_usdt","eth_in_usdt","avaxClient","createClient","url","ethClient","clients","rewardTokens","App","RAY","WEI_DECIMALS","REWARD_DECIMALS","SECONDS_PER_YEAR","useState","setAddress","setNetwork","rates","setRates","setUserReserves","userSubtotals","setUserSubtotals","userTotals","setUserTotals","annualSubtotals","setAnnualSubtotals","annualTotals","setAnnualTotals","length","user_query","client","reward_token_ticker","toPromise","user_response","userReserves","_subtotals","_totals","_annual_subtotals","_annual_totals","_token_list","i","reserve","symbol","currentATokenBalance","currentTotalDebt","_subtotal","_usdp","deposits","debt","format","push","_rates","REWARD_PRICE_ETH","reserves","token","includes","variableBorrowRate","liquidityRate","aEmissionPerSecond","vEmissionPerSecond","totalCurrentVariableDebt","totalATokenSupply","token_price_eth","underlying_token_decimals","depositAPR","variableBorrowAPR","aEmissionPerYear","vEmissionPerYear","incentiveDepositAPR","incentiveBorrowAPR","native","token_price","native_usd","avax_price","deposit_rewards_usd","borrow_rewards_usd","rewards","rewards_usd","_annual_subtotal","sum","useEffect","fetchData","Object","entries","map","deposit","borrow","index","item","USD","total","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80096bac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './AddressForm.css';\n\nclass AddressForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: this.props.address};\n    this.address = this.state.value\n    this.stateChanger = this.props.stateChanger;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.connectMetamask = this.connectMetamask.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    let address = this.state.value.toLowerCase();\n    if (Web3.utils.isAddress(address)) {\n      this.stateChanger(address);\n      this.address = address\n    } else {\n      alert('Invalid ethereum address: ' + address)\n    }\n    event.preventDefault();\n  }\n\n  async connectMetamask(event) {\n    console.log('event',event)\n    async function getAccount() {\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n      const accounts = await web3.eth.requestAccounts();\n      console.log('update state', accounts[0])\n      return accounts[0].toLowerCase()\n    }\n    let _account = await getAccount();\n    console.log('mmaccount', _account)\n    this.setState({value: _account});\n    this.stateChanger(_account)\n    this.address = _account\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Address:  \n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" className=\"btn btn-secondary\" />\n        <button type=\"button\" className=\"btn btn-primary\" onClick={this.connectMetamask}>Connect Metamask</button>\n        <p>Current Account: {this.address}</p>\n      </form>\n    );\n  }\n}\n\nexport default AddressForm;\n","import React, { Component } from 'react';\n\nclass NetworkSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: this.props.network};\n    this.stateChanger = this.props.stateChanger;\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    this.stateChanger(event.target.value)\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Network:\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value=\"eth\">Mainnet</option>\n            <option value=\"avax\">Avalanche</option>\n            <option value=\"matic\">Matic</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nexport default NetworkSelect;\n","import './App.css';\nimport AddressForm from './components/AddressForm'\nimport NetworkSelect from './components/NetworkSelect'\nimport { createClient } from 'urql'\nimport { useEffect, useState } from 'react'\n\nconst US_LOCALE = Intl.NumberFormat('en-US', {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nconst APIURLS = {'avax':'https://api.thegraph.com/subgraphs/name/aave/protocol-v2-avalanche',\n                  'matic': 'https://api.thegraph.com/subgraphs/name/aave/aave-v2-matic',\n                  'eth': 'https://api.thegraph.com/subgraphs/name/aave/protocol-v2'}\nconst query = `\nquery {\n  reserves (where: {\n    usageAsCollateralEnabled: true\n  }) {\n    id\n    name\n    price {\n      id\n      priceInEth\n    }\n    liquidityRate\n    variableBorrowRate\n    stableBorrowRate\n    aEmissionPerSecond\n    vEmissionPerSecond\n    decimals\n    totalATokenSupply\n    totalCurrentVariableDebt\n    symbol\n  }\n}\n`\n\n// keep a dict of token prices to avoid too many api calls to binance\nlet token_prices = {}\n\nasync function get_token_price_in_usd(ticker) {\n  ticker = ticker.replace('.e','').replace('W','')\n  if (ticker in token_prices) {\n  } else {\n    if (ticker !== 'USDT') {\n      if (ticker !== 'XSUSHI') {\n        token_prices[ticker] = await fetch(`https://api.binance.com/api/v3/ticker/price?symbol=${ticker}USDT`)\n          .then(response => response.json())\n          .catch(error => -1)\n          .then(data => {\n            if (data.hasOwnProperty(\"price\")) return parseFloat(data.price)\n            console.log('fetched from binance: ', ticker, token_prices[ticker])\n            return -1\n          })\n      } else { //xsushi\n        token_prices[ticker] = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ticker}&vs_currencies=usd`)\n        .then(response => response.json())\n        .catch(error => -1)\n        .then(data => {\n          if (data.hasOwnProperty(ticker.toLowerCase())) return parseFloat(data[ticker.toLowerCase()]['usd'])\n          console.log('fetched from coingecko: ', ticker, token_prices[ticker])\n          return -1\n        })\n      }\n    } else {\n      return 1.0\n    }\n  }\n  return token_prices[ticker]\n}\n\nasync function get_token_price_in_eth(ticker) {\n  let token_in_usdt = await get_token_price_in_usd(ticker)\n  let eth_in_usdt = await get_token_price_in_usd('ETH')\n  console.log('eth price of ', ticker, eth_in_usdt)\n  return token_in_usdt / eth_in_usdt\n}\n\nconst avaxClient = createClient({\n  url: APIURLS['avax']\n})\nconst ethClient = createClient({\n  url: APIURLS['eth']\n})\nconst maticClient = createClient({\n  url: APIURLS['matic']\n})\nconst clients = {'matic': maticClient, 'avax': avaxClient, 'eth': ethClient}\nconst rewardTokens = {'matic': 'WMATIC', 'avax': 'WAVAX', 'eth': 'WETH'}\n\nfunction App() {\n  \n  const RAY = 10**27\n  const WEI_DECIMALS = 10**18 // All emissions are in wei units, 18 decimal places\n  const REWARD_DECIMALS = 10**18 // All rewards have 18 decimal places (eth, matic, avax)\n  const SECONDS_PER_YEAR = 31536000\n\n  const [address, setAddress] = useState('')\n  const [network, setNetwork] = useState('avax')\n  const [rates, setRates] = useState({})\n  const [userReserves, setUserReserves] = useState([])\n  const [userSubtotals, setUserSubtotals] = useState([])\n  const [userTotals, setUserTotals] = useState({})\n  const [annualSubtotals, setAnnualSubtotals] = useState([])\n  const [annualTotals, setAnnualTotals] = useState({})\n\n  useEffect(() => {\n    fetchData()\n  }, [address, network]) // only rerun if address changes\n\n  async function fetchData() {\n    if (!address || address.length == 0) return\n    // clear data\n    setUserReserves([])\n    setUserSubtotals([])\n    setUserTotals({})\n    setRates({})\n    setAnnualSubtotals([])\n    setAnnualTotals({})\n\n    ///////////////////////////////////\n    // Get user specific data\n    //////////////////////////////////\n    const user_query = `\n    {\n      userReserves(where: { user: \"${address}\"}) {\n        id\n        reserve{\n          id\n          symbol\n        }\n        currentATokenBalance\n        currentTotalDebt\n      }\n    }\n    `\n    console.log('query',user_query)\n    let client = clients[network]\n    let reward_token_ticker = rewardTokens[network]\n    const user_response = await client.query(user_query).toPromise();\n    console.log('resp', user_response)\n    setUserReserves(user_response.data.userReserves);\n\n    let _subtotals = [] // {'symbol': 'WETH.e', 'debt': 0, 'deposits': 2}\n    let _totals = {'deposits': 0, 'debt': 0, 'sum': 0}\n    let _annual_subtotals = []\n    let _annual_totals = {'native': 0, 'rewards': 0, 'sum': 0}\n    let _token_list = ['ETH', \"MATIC\", \"AVAX\"]  //always get these rates\n    for (var i=0; i < user_response.data.userReserves.length; i++) {\n      let reserve = user_response.data.userReserves[i]\n      let symbol = reserve.reserve.symbol\n      let currentATokenBalance = parseFloat(reserve['currentATokenBalance']) / WEI_DECIMALS\n      let currentTotalDebt  = parseFloat(reserve['currentTotalDebt']) / WEI_DECIMALS\n      let _subtotal = {'symbol': symbol, 'debt': 0, 'deposits': 0}\n      console.log('tally',symbol, currentATokenBalance, currentTotalDebt)\n      let _usdp = await get_token_price_in_usd(symbol)\n      if (_usdp === -1) {\n        // token not found in binance api\n        continue\n      }\n      if (currentATokenBalance > 0) {\n        //console.log('val', val, currentATokenBalance, get_token_price_in_usd(symbol))\n        _subtotal['deposits'] += currentATokenBalance * _usdp\n      }\n      if (currentTotalDebt > 0) {\n        _subtotal['debt'] += currentTotalDebt * _usdp\n      }\n      _totals['deposits'] += _subtotal.deposits\n      _totals['debt'] += _subtotal.debt\n      _totals['sum'] += _subtotal.deposits - _subtotal.debt\n\n      // string formatting\n      _subtotal['sum'] = US_LOCALE.format(_subtotal.deposits - _subtotal.debt)\n      _subtotal['deposits'] = US_LOCALE.format(_subtotal.deposits)\n      _subtotal['debt'] = US_LOCALE.format(_subtotal.debt)\n      if (currentATokenBalance > 0 || currentTotalDebt > 0) {\n        _token_list.push(symbol)\n        _subtotals.push(_subtotal)\n      }\n    }\n    console.log('token list', _token_list)\n\n    /////////////////////////////////////////\n    // get aave rates data from thegraph.\n    // only care about rates the user has balances for\n    /////////////////////////////////////////\n    console.log(network)\n    console.log(client)\n    const response = await client.query(query).toPromise();\n    let _rates = {}\n    const REWARD_PRICE_ETH = await get_token_price_in_eth(reward_token_ticker.replace('W',''))\n    for (var i=0; i < response.data.reserves.length; i++) {\n      let token = response.data.reserves[i]\n      let symbol = token['symbol']\n      console.log('111111',symbol, _token_list)\n      if (!_token_list.includes(symbol)) continue\n      let variableBorrowRate = parseFloat(token['variableBorrowRate'])\n      let liquidityRate = parseFloat(token['liquidityRate'])\n      let aEmissionPerSecond = parseFloat(token['aEmissionPerSecond'])\n      let vEmissionPerSecond = parseFloat(token['vEmissionPerSecond'])\n      let totalCurrentVariableDebt = parseFloat(token['totalCurrentVariableDebt'])\n      let totalATokenSupply  = parseFloat(token['totalATokenSupply'])   \n      let token_price_eth = await get_token_price_in_eth(symbol)\n      let underlying_token_decimals = 10**parseFloat(token['decimals'])\n\n      // Deposit and Borrow calculations\n      // APY and APR are returned here as decimals, multiply by 100 to get the percents     \n      let depositAPR = liquidityRate/RAY\n      let variableBorrowAPR = variableBorrowRate/RAY\n      // let depositAPY = ((1 + (depositAPR / SECONDS_PER_YEAR)) ^ SECONDS_PER_YEAR) - 1\n      // let variableBorrowAPY = ((1 + (variableBorrowAPR / SECONDS_PER_YEAR)) ^ SECONDS_PER_YEAR) - 1\n      \n      // Incentives calculation\n      let aEmissionPerYear = aEmissionPerSecond * SECONDS_PER_YEAR\n      let vEmissionPerYear = vEmissionPerSecond * SECONDS_PER_YEAR\n\n      // UNDERLYING_TOKEN_DECIMALS will be the decimals of token underlying the aToken or debtToken\n      // For Example, UNDERLYING_TOKEN_DECIMALS for aUSDC will be 10**6 because USDC has 6 decimals\n      console.log(\"======================== \" + symbol + \" =================================\"  )\n      console.log('(aEmissionPerYear * REWARD_PRICE_ETH * WEI_DECIMALS)', aEmissionPerYear, REWARD_PRICE_ETH, WEI_DECIMALS)\n      console.log('(totalATokenSupply * token_price_eth * underlying_token_decimals)', totalATokenSupply , token_price_eth , underlying_token_decimals)\n      console.log(\"======================== \" + symbol + \" =================================\"  )\n\n\n      let incentiveDepositAPR = (aEmissionPerYear * REWARD_PRICE_ETH * underlying_token_decimals)/\n                                (totalATokenSupply * token_price_eth * REWARD_DECIMALS)\n                                \n      let incentiveBorrowAPR = (vEmissionPerYear * REWARD_PRICE_ETH * underlying_token_decimals)/\n                                (totalCurrentVariableDebt * token_price_eth * REWARD_DECIMALS)\n\n      _rates[symbol] =  {'deposit': {'native': depositAPR }, 'borrow': {'native': variableBorrowAPR }}\n      // console.log('(aEmissionPerSecond * SECONDS_PER_YEAR * REWARD_PRICE_ETH * WAD) / (totalATokenSupply * token_price_eth * underlying_token_decimals)',(aEmissionPerSecond * SECONDS_PER_YEAR * REWARD_PRICE_ETH * WAD) / (totalATokenSupply * token_price_eth * underlying_token_decimals))\n      // console.log('(aEmissionPerSecond * SECONDS_PER_YEAR * REWARD_PRICE_ETH * WAD) / (totalATokenSupply * token_price_eth * underlying_token_decimals)',(aEmissionPerSecond * SECONDS_PER_YEAR * REWARD_PRICE_ETH * WAD))\n      // console.log('(totalATokenSupply * token_price_eth * underlying_token_decimals)',(totalATokenSupply * token_price_eth * underlying_token_decimals))\n      _rates[symbol]['deposit']['rewards'] = incentiveDepositAPR\n      if (totalCurrentVariableDebt > 0) {\n        _rates[symbol]['borrow']['rewards'] = incentiveBorrowAPR\n      } else {\n        _rates[symbol]['borrow']['rewards'] = 0\n      }\n    }\n    console.log('rate',_rates)\n    setRates(_rates)\n     \n\n\n\n    // Calculate annual rewards\n    for (var i=0; i < user_response.data.userReserves.length; i++) {\n      let reserve = user_response.data.userReserves[i]\n      let symbol = reserve.reserve.symbol\n      if (!_token_list.includes(symbol) || symbol === 'USDT') continue\n      console.log(symbol, _token_list)\n      let currentATokenBalance = parseFloat(reserve['currentATokenBalance']) / WEI_DECIMALS\n      let currentTotalDebt  = parseFloat(reserve['currentTotalDebt']) / WEI_DECIMALS\n      if (currentATokenBalance === 0 && currentTotalDebt === 0) continue\n      // calc native rewards\n      console.log('Annual rewards for this symbol', symbol)\n      let native = (currentATokenBalance * _rates[symbol]['deposit']['native']) - (currentTotalDebt * _rates[symbol]['borrow']['native'])\n      let token_price = await get_token_price_in_usd(symbol)\n      let native_usd = native * token_price\n      console.log('nativeusd', native_usd)\n      \n      // calc axax rewards (incentives)\n      let avax_price = await get_token_price_in_usd('AVAX')\n      let deposit_rewards_usd = currentATokenBalance * token_price * _rates[symbol]['deposit']['rewards']\n      let borrow_rewards_usd = currentTotalDebt * token_price * _rates[symbol]['borrow']['rewards']\n      let rewards = (deposit_rewards_usd + borrow_rewards_usd) / avax_price\n      console.log(symbol + ' Rewards', deposit_rewards_usd, borrow_rewards_usd)\n      // if (symbol.indexOf('AVAX') === -1) {\n      //   if (deposit_rewards > 0) deposit_rewards /= avax_price\n      //   if (borrow_rewards > 0) borrow_rewards /= avax_price\n      // }\n\n      let rewards_usd = deposit_rewards_usd + borrow_rewards_usd\n      // let rewards_usd = rewards * avax_price\n      console.log('rewards',rewards_usd)\n\n      _annual_totals['native'] += native_usd\n      _annual_totals['rewards'] += rewards_usd\n      _annual_totals['sum'] += native_usd + rewards_usd\n      let _annual_subtotal = {'symbol': symbol,\n                              'native':\n                                {'USD': US_LOCALE.format(native_usd),\n                                  'native': native\n                                },\n                              'rewards':\n                                {'USD': US_LOCALE.format(rewards_usd),\n                                  'WAVAX': rewards},\n                              'total':\n                                {'USD': US_LOCALE.format(native_usd + rewards_usd)}}\n\n      _annual_subtotals.push(_annual_subtotal)\n    }\n    _totals['deposits'] = US_LOCALE.format(_totals.deposits)\n    _totals['debt'] = US_LOCALE.format(_totals.debt)\n    _totals['sum'] = US_LOCALE.format(_totals.sum)\n    _annual_totals['native'] = US_LOCALE.format(_annual_totals.native)\n    _annual_totals['rewards'] = US_LOCALE.format(_annual_totals.rewards)\n    _annual_totals['sum'] = US_LOCALE.format(_annual_totals.sum)\n    console.log('subtotals',_subtotals)\n    console.log('totals',_totals)\n    console.log('annual subtotals', _annual_subtotals)\n    setUserSubtotals(_subtotals)\n    setUserTotals(_totals)\n    setAnnualSubtotals(_annual_subtotals)\n    setAnnualTotals(_annual_totals)\n  }\n  return (\n    <div className=\"App\">\n      <AddressForm address={address} stateChanger={setAddress}/>\n      <NetworkSelect network={network} stateChanger={setNetwork}/>\n      <h2>Current Rates</h2>\n          <div className=\"container table-head\">\n            <div className=\"row align-items-start\">\n              <div className=\"col\">Token</div>\n              <div className=\"col\">Deposit Rate</div>\n              <div className=\"col\">Deposit Rewards</div>\n              <div className=\"col\">Borrow Rate</div>\n              <div className=\"col\">Borrow Rewards</div>\n            </div>\n          </div>\n      {\n        Object.entries(rates).map(([symbol, data]) =>   //.map((rate, index) => (\n          <div className=\"container\">\n            <div className=\"row align-items-start\">\n            <div className=\"col\">{symbol}</div>\n            <div className=\"col\">{100*data.deposit.native}</div>\n            <div className=\"col\">{100*data.deposit.rewards}</div>\n            <div className=\"col\">{100*data.borrow.native}</div>\n            <div className=\"col\">{100*data.borrow.rewards}</div>\n            </div>\n          </div>\n        )\n      }\n      {/* <br></br>\n      <h2>User Balances (native)</h2>\n      <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">Token</div>\n            <div className=\"col\">Deposits</div>\n            <div className=\"col\">Borrows</div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n          </div>\n        </div>\n      {\n        userReserves.map((reserve, index) => (\n          <div className=\"container\">\n            <div className=\"row align-items-start\">\n            <div className=\"col\">{reserve.reserve.symbol}</div>\n            <div className=\"col\">{reserve.currentATokenBalance / 10**18}</div>\n            <div className=\"col\">{reserve.currentTotalDebt / 10**18}</div>\n            </div>\n          </div>\n        ))\n      } */}\n      <br></br>\n      <h2>User Balances (USD)</h2>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">Token</div>\n            <div className=\"col\">Deposits</div>\n            <div className=\"col\">Borrows</div>\n            <div className=\"col\">Sum</div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n          </div>\n        </div>\n        {\n          userSubtotals.map((token, index) => (\n            \n            <div className=\"container\">\n              <div className=\"row align-items-start\">\n              <div className=\"col\">{token.symbol}</div>\n              <div className=\"col\">{token.deposits}</div>\n              <div className=\"col\">{token.debt}</div>\n              <div className=\"col\">{token.sum}</div>\n              </div>\n            </div>\n\n          ))\n        }\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\"/>\n              { <div className=\"col\">{userTotals.deposits}</div> }\n              { <div className=\"col\">{userTotals.debt}</div> }\n              {  <div className=\"col\">{userTotals.sum}</div> }\n            </div>\n        </div>\n\n        <br></br>\n        <h2>Annual Rewards (current rates extrapolated)</h2>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">Token</div>\n            <div className=\"col\">Native Rewards</div>\n            <div className=\"col\">Incentives</div>\n            <div className=\"col\">Sum</div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n          </div>\n        </div>\n        {\n          annualSubtotals.map((item, index) => (\n            <div className=\"container\">\n              <div className=\"row align-items-start\">\n              <div className=\"col\">{item.symbol}</div>\n              <div className=\"col\">{item.native.USD}</div>\n              <div className=\"col\">{item.rewards.USD}</div>\n              <div className=\"col\">{item.total.USD}</div>\n              </div>\n            </div>\n          ))\n        }\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n            <div className=\"col\">============</div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row align-items-start\">\n            <div className=\"col\"/>\n              { <div className=\"col\">{annualTotals.native}</div> }\n              { <div className=\"col\">{annualTotals.rewards}</div> }\n              {  <div className=\"col\">{annualTotals.sum}</div> }\n            </div>\n        </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}